
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/dark.min.css">
<h2>‚úì Generated a new token signed with secret!</h2>
<div style="margin:4px;font-size:70%;overflow-wrap:anywhere;word-wrap:break-word">
<span id="token-part-header" style="color:red;"><%= token.split(".")[0] %></span><span style="font-weight:bold;font-size:120%;">.</span>
<span id="token-part-payload" style="color:blue;"><%= token.split(".")[1] %></span><span style="font-weight:bold;font-size:120%;">.</span>
<span id="token-part-signature" style="color:green;"><%= token.split(".")[2] %></span>
</div>
<br/>
<p>
This is a practical example of a JWT
<br/>Wow, it looks garbage!
<br/>Sure it does look like garbage, but it is not. In the next few minutes, you‚Äôll see how easy it is to turn this garbage into useful information.
</p>
<h3>Token schema</h3>
<p>Did you notice two dots(.) in the token? These dots (.) separate 3 important parts of the token</p>

<b><code>{<span style="color:red;">header</span>}.{<span style="color:blue;">payload</span>}.{<span style="color:green;">signature</span>}</code></b><br/>
<ol>
    <li><b>Header</b><code style="color: red; font-size: 80%;margin-left: 12px;">eyJhbGciOiJSU....</code>
        <br/>This part is the metadata about the cryptography methods used for signature(the last part of this token)
            e.g. The Cryptography Algorithm, Token type, etc.
        <p style="font-weight: 300;">
            <span style="font-weight: 200;opacity: 80%;">What! Where? It is not readable.</span>
            <br/>Hold on! The header is encoded with <code>base64UrlEncode</code>, and can easily be decoded by anyone without any additional information other than the token itself. Let's decode this header with browser's <code>atob()</code> method.
            <br/><br/><button><a href="javascript:alert(window.atob(document.getElementById('token-part-header').textContent))">Click to decode header</a></button>
            <br/>(This will show you the decoded header in plain text)
                    
            <br/><br/>üëâ Takeaway: The header can be decoded by anyone. It‚Äôs not garbage for anyone.
        </p>
    </li>
    <li><b>Payload</b><code style="color: blue; font-size: 80%;margin-left: 12px;">eyJkYXRhIjoiSSB....</code>
        <br/>Actual data we want to exchange via this token e.g. userId
        <p style="font-weight: 300;">
            This is also encoded with <code>base64UrlEncode</code>. Just like the header, let's decode payload as well with browser‚Äôs <code>atob</code> method.
            <br/><br/><button><a href="javascript:alert(window.atob(document.getElementById('token-part-payload').textContent))">Click to decode payload</a></button>
            <br/>This will show you the decoded payload in plain text
            <br/><br/>üëâ Takeaway: The payload can be decoded by anyone. It‚Äôs not garbage for anyone.
        </p>
    </li>
    <li><b>Signature</b><code style="color: green; font-size: 80%;margin-left: 12px;">RmT_mo6_TjjTiuv....</code>
        <br/>To verify sender or ensure message integrity
        <p style="font-weight: 300;">
            Can be verified by anyone if they know a secret/publicKey. But changing data(spoofing) is not possible.
            <br/><br/><span style="font-weight: 200;">What do you need to verify a token's integrity?</span>
            <br/>You need something more than just the token. You need to know a public key corresponding to the private-key used during the creation of this token. 
            <br/><br/>Because I am the creator of this example token that I just showed you. I used an algorithm called <code>RSA256</code> where I used a pair of public/private keys for this token.
            <br/>Now, I‚Äôm sharing the public key with you, now you go ahead and verify JWT integrity with this public key.
            <br/><br/><button><a target="_blank" href="/jwt/verify/<%= token %>">Verify this JWT now</a> </button>
        </p>
    </li>
</ol>

<br/>Ok, now you understand how does a JWT look like, but...
<h2>What can JWTs be used for?</h2>
<p style="font-weight: 300;">
JWTs can be used as a digital claim issued by one party, which another party can verify for integrity.
    <ul>
        <li>Typical usage of JWTs are</li>
        <li>To prove whether a user is logged in or not</li>
        <li>To prove whether a user is authorized to perform admin actions or not</li>
    </ul>
    What‚Äôs more interesting?
    <strong>In order to verify JWT integrity, the other party(one that verifies) does not need to communicate with the first party(one that created JWT)</strong>. Well, assuming the first party has shared the public key with the other party already. 
    <br/>So what if I leverage this to create a system as following
    <ol>
        <li>A computer verifies user identity(e.g. username/password) and issues JWTs to the users. Let‚Äôs call it an ‚Äúidentity server‚Äù</li>
        <li>Another computer that takes requests for users‚Äô protected resources, let‚Äôs call it ‚Äúapplication server‚Äù. It asks for JWT along with the request. This computer(application server) verifies the JWT and makes sure that the JWT was not tampered with</li>
        <li>And then the above ‚Äúapplication server‚Äù uses JWT payload data to decide whether to give access to a particular resource or not. Essentially allowing the access to users as ‚Äúidentity server‚Äù wanted (remember the identity server created the JWT in step 1, at that time, it had also put in the access related necessary info in the JWT)</li>
    </ol>

    This is a typical example of authentication/authorization using JWTs and the interesting thing here is that you separated the work related to identity vs work related to actual user resources. You don‚Äôt need to rely on a single central system any more to effectively do this and thus can scale and manage in a better way.
</p>

Let‚Äôs see this system in action


<!-- <a target="_blank" href="https://jwt.io/introduction/">Read more..</a><br/> -->

<br/><br/>
<a href="/jwt/form">Next: Create a JWT</a><br/>

<br/><br/><br/><br/><br/><br/>
<footer>
<span style="opacity:0.8;float:left;font-size:80%;">
    <a href="<%= NEW_ISSUE_URL %>" target="_blank" target="_blank">Report a bug/improvement</a>
    <br/><a href="https://twitter.com/intent/tweet?text=%22Learn%20JWT%20by%20reverse%20engineering%22%20%20%40pradeep_io&url=<%= CODE_REPOSITORY %>" target="_blank">Share on twitter</a>
    <br/><br/><a href="/docs" target="_blank">Read Documentation</a>
    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <br/><br/><a style="padding-top:12px;" class="github-button" href="<%= CODE_REPOSITORY %>" data-color-scheme="no-preference: light; light: light; light: light;" data-size="small" data-show-count="true" aria-label="Star the repo on GitHub">Star/Fork the repo</a>
</span>
<span style="opacity:0.8;float:right;font-size:80%;">
    <span>Created by <a href="https://twitter.com/pradeep_io" target="_blank">@pradeep_io</a></span>
</span>
<br/><br/><br/>
</footer>