{

  "app": {
    "anatomyJwt": "Anatomy of a JWT",
    "bestMethod": "Which is the best method?",
    "documentation": "Documentation",
    "finishTutorial": "Finish tutorial",
    "generatingToken": "Generating a secure token",
    "home": "Home",
    "logout": "Logout = Invalidating tokens",
    "mainPage": "Main Page",
    "reportBug": "Report a bug / improvement",
    "shareTwitter": "Share on Twitter",
    "tokenAuthenticate": "Using token to authenticate",
    "tokenAuthenticate1": "1. Through Request headers",
    "tokenAuthenticate2": "2. Through form body",
    "tokenAuthenticate3": "3. Through cookies",
    "verifyingToken": "Verifying a token"
  },

  "anatomy": {
    "anatomyJwt": "What does a JWT look like? (Anatomy of a JWT)",
    "anatomyJwt1": "This is a practical example of a JWT.",
    "anatomyJwt2": "Wow, it looks garbage!",
    "anatomyJwt3": "Sure it does look like garbage, but it is not. In the next few minutes, you'll see how easy it is to turn this garbage into useful information.",
    "decodeHeader": "Click to decode header",
    "decodePayload": "Click to decode payload",
    "decodedHeader": "DECODED HEADER:",
    "decodedPayload": "DECODED PAYLOAD:",
    "edit": "Edit",
    "header": "Header",
    "header1": "This part is the metadata about the cryptography methods used for signature. e.g. The Cryptography Algorithm, Token type, etc.",
    "header2": "What! Where? It is not readable.",
    "header3": "Hold on. The header is encoded with base64UrlEncode, and can easily be decoded by anyone without any additional information other than the token itself. Let's decode this header with browser's <code>atob()</code> method.",
    "payload": "Payload",
    "payload1": "Actual data we want to exchange via this token e.g. userId.",
    "payload2": "This is also encoded with <code>base64UrlEncode</code>. Just like the header, let's decode payload as well with browser's <code>atob()</code> method.",
    "showDecodedHeader": "(This will show you the decoded header in plain text)",
    "showDecodedPayload": "(This will show you the decoded payload in plain text)",
    "signature": "Signature",
    "signature1": "To verify sender or ensure token data integrity.",
    "signature2": "What if this token was tampered somewhere in between when it traveled from the server(where it was created) to your browser(where you're seeing it right now)? You can verify that. <strong>>To verify the token integrity, you'll need to know something more than just the token. You'll need to know a public key</strong> corresponding to the private-key used during the creation of this token.",
    "signature3": "Luckily, I am the token creator here (for the example token I just showed you). I used a pair of public/private keys for this token and I'm sharing the public key with you, now you go ahead and verify JWT integrity with this public key.",
    "signature4": "The public key (from the public-private key pair I used to secure the token).",
    "takeawayHeader": "Takeaway: The header can be decoded by anyone. It's not garbage for anyone.",
    "takeawayPayload": "Takeaway: The payload can be decoded by anyone. It's not garbage for anyone.",
    "tokenNew": "Generated a new token signed with secret!",
    "tokenSchema": "Token schema",
    "tokenSchema1": "Did you notice two dots(.) in the token? These dots (.) separate 3 important parts of the token.",
    "verifyJwt": "Use this Public Key to Verify JWT"
  },

  "home": {
    "15mins": "15 MINS",
    "jwtToken": "JWT Token Decoder & Encoder: auth-jwt",
    "introduction": "Introduction",
    "introduction1": "This is an interactive tutorial to learn about JWT by reverse engineering.",
    "introduction2": "By the end of this tutorial, you'll learn what a JWT is and how you can implement authentication using JWTs in your app.",
    "introduction3": "We'll start with examples and then reverse engineer by deconstructing each part.",
    "knowledge": "Prior Knowledge Expected",
    "knowledge1": "I am expecting you to have a very high-level overview of following concepts but I  will also make sure to link necessary learning resources wherever you need them.",
    "knowledge2": "HTML forms and cookies",
    "knowledge3": "HTTP web requests",
    "knowledge4": "Public-key cryptography (no need to learn the math, just learn what it does)",
    "knowledge5": "Base64 encoding (no need to learn the math)",
    "learnJwt": "Learn JWT by reverse engineering & debug easily",
    "startInteractive": "Start interactive tutorial",
    "timeRequired": "TIME REQUIRED:"
  }

}
